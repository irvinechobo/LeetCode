[1] In-Order Traversal
In-order traversal means to "visit" (often, print) the left branch, then the current node, and finally, the right branch.

    void inOrderTraversal(TreeNode * node) {
        if(node != nullptr) {
            inOrderTraversal(node->left);
            visit(node);
            inOrderTraversal(node->right);
        }
    }
    
When performed on a binary search tree, it visits the nodes in ascending order (hence the name "in-order").


[2] Pre-Order Traversal
Pre-order traversal visits the current node before its child nodes (hence the name "pre-order").

    void preOrderTraversal(TreeNode * node) {
        if(node != nullptr) {
            visit (node) ;
            preOrderTraversal(node->left);
            preOrderTraversal(node->right);
        }
    }
    
In a pre-order traversal, the root is always the first node visited.



[3] Post-Order Traversal
Post-order traversal visits the current node after its child nodes (hence the name "post-order").

    void postOrderTraversal(TreeNode * node) {
        if(node != nullptr) {
            postOrderTraversal(node->left);
            postOrderTraversal(node->right);
            visit(node);
        }
    }
    
In a post-order traversal, the root is always the last node visited. 