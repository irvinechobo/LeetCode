545. Boundary of Binary Tree  <Medium>


/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<int> boundaryOfBinaryTree(TreeNode* root) {
        if(!root) return {};
        vector<int> res, res2;
        
        res.push_back(root->val);
        
        dfs_left(root->left, res);
        
        dfs_leaf(root->left, res);
        dfs_leaf(root->right, res);
        
        dfs_right(root->right, res2);
        reverse(res2.begin(), res2.end());
        
        for(auto& it : res2){
            res.push_back(it);
        }
        
        return res;
    }
    
    void dfs_left(TreeNode* root, vector<int>& res){
        if(!root) return;
        if(!root->left && !root->right) return;
        
        res.push_back(root->val);
        
        if(root->left) dfs_left(root->left,res);
        else if(root->right) dfs_left(root->right,res);
    }

    void dfs_leaf(TreeNode* root, vector<int>& res){
        if(!root) return;
        
        if(!root->left && !root->right)
            res.push_back(root->val);
        if(root->left) dfs_leaf(root->left,res);
        if(root->right) dfs_leaf(root->right,res);
    }

    void dfs_right(TreeNode* root, vector<int>& res){
        if(!root) return;
        if(!root->left && !root->right) return;
                
        res.push_back(root->val);
        
        if(root->right) dfs_right(root->right,res);
        else if(root->left) dfs_right(root->left,res);
    }

};