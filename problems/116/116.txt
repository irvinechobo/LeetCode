116. Populating Next Right Pointers in Each Node  <Medium>


/*
// Definition for a Node.
class Node {
public:
    int val;
    Node* left;
    Node* right;
    Node* next;

    Node() : val(0), left(NULL), right(NULL), next(NULL) {}

    Node(int _val) : val(_val), left(NULL), right(NULL), next(NULL) {}

    Node(int _val, Node* _left, Node* _right, Node* _next)
        : val(_val), left(_left), right(_right), next(_next) {}
};
*/

class Solution {
public:
    Node* connect(Node* root) {
        if(root == NULL)
            return root;
        
        queue<Node*> Q;
        Q.push(root);
        
        while(!Q.empty()){
            int size = Q.size();
            for(int i = 0; i < size; i++)
            {
                Node* cur = Q.front();
                Q.pop();
                
                if(i < size - 1)
                    cur->next = Q.front();
                else
                    cur->next = nullptr;
                
                if(cur->left) 
                    Q.push(cur->left);
                if(cur->right)
                    Q.push(cur->right);
            }
        }
        
        return root;
    }
};