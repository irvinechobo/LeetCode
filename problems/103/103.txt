103. Binary Tree Zigzag Level Order Traversal <Medium>

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<vector<int>> zigzagLevelOrder(TreeNode* root) {
        if(!root) return {};
        
        queue<TreeNode*> Q;
        Q.push(root);
        
        vector<vector<int>> res;
        bool zigzag = false;
        while(!Q.empty()){
            int size = Q.size();
            
            vector<int> vec;
            for(int i = 0; i < size; i++){
                TreeNode* curr = Q.front();
                Q.pop();
                
                vec.push_back(curr->val);
                
                if(curr->left) Q.push(curr->left);
                if(curr->right) Q.push(curr->right);
            }
            
            if(zigzag)
                reverse(vec.begin(), vec.end());
            
            res.push_back(vec);
            
            zigzag = !zigzag;
            
        }
        
        return res;
    }
};